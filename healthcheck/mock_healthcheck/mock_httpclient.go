// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mock_healthcheck

import (
	"net/http"
	"sync"
)

var (
	lockhttpClientMockGet sync.RWMutex
)

// HttpClientMock is a mock implementation of httpClient.
//
//     func TestSomethingThatUseshttpClient(t *testing.T) {
//
//         // make and configure a mocked httpClient
//         mockedhttpClient := &HttpClientMock{
//             GetFunc: func(url string) (*http.Response, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//         }
//
//         // TODO: use mockedhttpClient in code that requires httpClient
//         //       and then make assertions.
//
//     }
type HttpClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(url string) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// URL is the url argument value.
			URL string
		}
	}
}

// Get calls GetFunc.
func (mock *HttpClientMock) Get(url string) (*http.Response, error) {
	if mock.GetFunc == nil {
		panic("moq: HttpClientMock.GetFunc is nil but httpClient.Get was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	lockhttpClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockhttpClientMockGet.Unlock()
	return mock.GetFunc(url)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedhttpClient.GetCalls())
func (mock *HttpClientMock) GetCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	lockhttpClientMockGet.RLock()
	calls = mock.calls.Get
	lockhttpClientMockGet.RUnlock()
	return calls
}
