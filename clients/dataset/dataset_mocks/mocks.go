// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package dataset_mocks

import (
	"io"
	"net/http"
	"net/url"
	"sync"
)

var (
	lockRHTTPClientMockDo       sync.RWMutex
	lockRHTTPClientMockGet      sync.RWMutex
	lockRHTTPClientMockHead     sync.RWMutex
	lockRHTTPClientMockPost     sync.RWMutex
	lockRHTTPClientMockPostForm sync.RWMutex
)

// RHTTPClientMock is a mock implementation of RHTTPClient.
//
//     func TestSomethingThatUsesRHTTPClient(t *testing.T) {
//
//         // make and configure a mocked RHTTPClient
//         mockedRHTTPClient := &RHTTPClientMock{
//             DoFunc: func(req *http.Request) (*http.Response, error) {
// 	               panic("TODO: mock out the Do method")
//             },
//             GetFunc: func(url string) (*http.Response, error) {
// 	               panic("TODO: mock out the Get method")
//             },
//             HeadFunc: func(url string) (*http.Response, error) {
// 	               panic("TODO: mock out the Head method")
//             },
//             PostFunc: func(url string, contentType string, body io.Reader) (*http.Response, error) {
// 	               panic("TODO: mock out the Post method")
//             },
//             PostFormFunc: func(uri string, data url.Values) (*http.Response, error) {
// 	               panic("TODO: mock out the PostForm method")
//             },
//         }
//
//         // TODO: use mockedRHTTPClient in code that requires RHTTPClient
//         //       and then make assertions.
//
//     }
type RHTTPClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(req *http.Request) (*http.Response, error)

	// GetFunc mocks the Get method.
	GetFunc func(url string) (*http.Response, error)

	// HeadFunc mocks the Head method.
	HeadFunc func(url string) (*http.Response, error)

	// PostFunc mocks the Post method.
	PostFunc func(url string, contentType string, body io.Reader) (*http.Response, error)

	// PostFormFunc mocks the PostForm method.
	PostFormFunc func(uri string, data url.Values) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Req is the req argument value.
			Req *http.Request
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Url is the url argument value.
			Url string
		}
		// Head holds details about calls to the Head method.
		Head []struct {
			// Url is the url argument value.
			Url string
		}
		// Post holds details about calls to the Post method.
		Post []struct {
			// Url is the url argument value.
			Url string
			// ContentType is the contentType argument value.
			ContentType string
			// Body is the body argument value.
			Body io.Reader
		}
		// PostForm holds details about calls to the PostForm method.
		PostForm []struct {
			// Uri is the uri argument value.
			Uri string
			// Data is the data argument value.
			Data url.Values
		}
	}
}

// Do calls DoFunc.
func (mock *RHTTPClientMock) Do(req *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("moq: RHTTPClientMock.DoFunc is nil but RHTTPClient.Do was just called")
	}
	callInfo := struct {
		Req *http.Request
	}{
		Req: req,
	}
	lockRHTTPClientMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockRHTTPClientMockDo.Unlock()
	return mock.DoFunc(req)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedRHTTPClient.DoCalls())
func (mock *RHTTPClientMock) DoCalls() []struct {
	Req *http.Request
} {
	var calls []struct {
		Req *http.Request
	}
	lockRHTTPClientMockDo.RLock()
	calls = mock.calls.Do
	lockRHTTPClientMockDo.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RHTTPClientMock) Get(url string) (*http.Response, error) {
	if mock.GetFunc == nil {
		panic("moq: RHTTPClientMock.GetFunc is nil but RHTTPClient.Get was just called")
	}
	callInfo := struct {
		Url string
	}{
		Url: url,
	}
	lockRHTTPClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRHTTPClientMockGet.Unlock()
	return mock.GetFunc(url)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRHTTPClient.GetCalls())
func (mock *RHTTPClientMock) GetCalls() []struct {
	Url string
} {
	var calls []struct {
		Url string
	}
	lockRHTTPClientMockGet.RLock()
	calls = mock.calls.Get
	lockRHTTPClientMockGet.RUnlock()
	return calls
}

// Head calls HeadFunc.
func (mock *RHTTPClientMock) Head(url string) (*http.Response, error) {
	if mock.HeadFunc == nil {
		panic("moq: RHTTPClientMock.HeadFunc is nil but RHTTPClient.Head was just called")
	}
	callInfo := struct {
		Url string
	}{
		Url: url,
	}
	lockRHTTPClientMockHead.Lock()
	mock.calls.Head = append(mock.calls.Head, callInfo)
	lockRHTTPClientMockHead.Unlock()
	return mock.HeadFunc(url)
}

// HeadCalls gets all the calls that were made to Head.
// Check the length with:
//     len(mockedRHTTPClient.HeadCalls())
func (mock *RHTTPClientMock) HeadCalls() []struct {
	Url string
} {
	var calls []struct {
		Url string
	}
	lockRHTTPClientMockHead.RLock()
	calls = mock.calls.Head
	lockRHTTPClientMockHead.RUnlock()
	return calls
}

// Post calls PostFunc.
func (mock *RHTTPClientMock) Post(url string, contentType string, body io.Reader) (*http.Response, error) {
	if mock.PostFunc == nil {
		panic("moq: RHTTPClientMock.PostFunc is nil but RHTTPClient.Post was just called")
	}
	callInfo := struct {
		Url         string
		ContentType string
		Body        io.Reader
	}{
		Url:         url,
		ContentType: contentType,
		Body:        body,
	}
	lockRHTTPClientMockPost.Lock()
	mock.calls.Post = append(mock.calls.Post, callInfo)
	lockRHTTPClientMockPost.Unlock()
	return mock.PostFunc(url, contentType, body)
}

// PostCalls gets all the calls that were made to Post.
// Check the length with:
//     len(mockedRHTTPClient.PostCalls())
func (mock *RHTTPClientMock) PostCalls() []struct {
	Url         string
	ContentType string
	Body        io.Reader
} {
	var calls []struct {
		Url         string
		ContentType string
		Body        io.Reader
	}
	lockRHTTPClientMockPost.RLock()
	calls = mock.calls.Post
	lockRHTTPClientMockPost.RUnlock()
	return calls
}

// PostForm calls PostFormFunc.
func (mock *RHTTPClientMock) PostForm(uri string, data url.Values) (*http.Response, error) {
	if mock.PostFormFunc == nil {
		panic("moq: RHTTPClientMock.PostFormFunc is nil but RHTTPClient.PostForm was just called")
	}
	callInfo := struct {
		Uri  string
		Data url.Values
	}{
		Uri:  uri,
		Data: data,
	}
	lockRHTTPClientMockPostForm.Lock()
	mock.calls.PostForm = append(mock.calls.PostForm, callInfo)
	lockRHTTPClientMockPostForm.Unlock()
	return mock.PostFormFunc(uri, data)
}

// PostFormCalls gets all the calls that were made to PostForm.
// Check the length with:
//     len(mockedRHTTPClient.PostFormCalls())
func (mock *RHTTPClientMock) PostFormCalls() []struct {
	Uri  string
	Data url.Values
} {
	var calls []struct {
		Uri  string
		Data url.Values
	}
	lockRHTTPClientMockPostForm.RLock()
	calls = mock.calls.PostForm
	lockRHTTPClientMockPostForm.RUnlock()
	return calls
}
