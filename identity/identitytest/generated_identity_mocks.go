// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package identitytest

import (
	"context"
	"github.com/ONSdigital/go-ns/common"
	"net/http"
	"sync"
)

var (
	lockHTTPClientMockDo sync.RWMutex
)

// HTTPClientMock is a mock implementation of HTTPClient.
//
//     func TestSomethingThatUsesHTTPClient(t *testing.T) {
//
//         // make and configure a mocked HTTPClient
//         mockedHTTPClient := &HTTPClientMock{
//             DoFunc: func(ctx context.Context, req *http.Request) (*http.Response, error) {
// 	               panic("TODO: mock out the Do method")
//             },
//         }
//
//         // TODO: use mockedHTTPClient in code that requires HTTPClient
//         //       and then make assertions.
//
//     }
type HTTPClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, req *http.Request) (*http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *http.Request
		}
	}
}

// Do calls DoFunc.
func (mock *HTTPClientMock) Do(ctx context.Context, req *http.Request) (*http.Response, error) {
	if mock.DoFunc == nil {
		panic("moq: HTTPClientMock.DoFunc is nil but HTTPClient.Do was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *http.Request
	}{
		Ctx: ctx,
		Req: req,
	}
	lockHTTPClientMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockHTTPClientMockDo.Unlock()
	return mock.DoFunc(ctx, req)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedHTTPClient.DoCalls())
func (mock *HTTPClientMock) DoCalls() []struct {
	Ctx context.Context
	Req *http.Request
} {
	var calls []struct {
		Ctx context.Context
		Req *http.Request
	}
	lockHTTPClientMockDo.RLock()
	calls = mock.calls.Do
	lockHTTPClientMockDo.RUnlock()
	return calls
}

var (
	lockAuditorMockRecord sync.RWMutex
)

// AuditorMock is a mock implementation of Auditor.
//
//     func TestSomethingThatUsesAuditor(t *testing.T) {
//
//         // make and configure a mocked Auditor
//         mockedAuditor := &AuditorMock{
//             RecordFunc: func(ctx context.Context, action string, result string, params common.Params) error {
// 	               panic("TODO: mock out the Record method")
//             },
//         }
//
//         // TODO: use mockedAuditor in code that requires Auditor
//         //       and then make assertions.
//
//     }
type AuditorMock struct {
	// RecordFunc mocks the Record method.
	RecordFunc func(ctx context.Context, action string, result string, params common.Params) error

	// calls tracks calls to the methods.
	calls struct {
		// Record holds details about calls to the Record method.
		Record []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Action is the action argument value.
			Action string
			// ActionResult is the result argument value.
			Result string
			// Params is the params argument value.
			Params common.Params
		}
	}
}

// Record calls RecordFunc.
func (mock *AuditorMock) Record(ctx context.Context, action string, result string, params common.Params) error {
	if mock.RecordFunc == nil {
		panic("moq: AuditorMock.RecordFunc is nil but Auditor.Record was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Action string
		Result string
		Params common.Params
	}{
		Ctx:    ctx,
		Action: action,
		Result: result,
		Params: params,
	}
	lockAuditorMockRecord.Lock()
	mock.calls.Record = append(mock.calls.Record, callInfo)
	lockAuditorMockRecord.Unlock()
	return mock.RecordFunc(ctx, action, result, params)
}

// RecordCalls gets all the calls that were made to Record.
// Check the length with:
//     len(mockedAuditor.RecordCalls())
func (mock *AuditorMock) RecordCalls() []struct {
	Ctx    context.Context
	Action string
	Result string
	Params common.Params
} {
	var calls []struct {
		Ctx    context.Context
		Action string
		Result string
		Params common.Params
	}
	lockAuditorMockRecord.RLock()
	calls = mock.calls.Record
	lockAuditorMockRecord.RUnlock()
	return calls
}
