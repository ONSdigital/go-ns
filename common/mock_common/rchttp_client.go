// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ONSdigital/go-ns/common (interfaces: RCHTTPClient)

// Package mock_common is a generated GoMock package.
package mock_common

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"
	time "time"
)

// MockRCHTTPClient is a mock of RCHTTPClient interface
type MockRCHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockRCHTTPClientMockRecorder
}

// MockRCHTTPClientMockRecorder is the mock recorder for MockRCHTTPClient
type MockRCHTTPClientMockRecorder struct {
	mock *MockRCHTTPClient
}

// NewMockRCHTTPClient creates a new mock instance
func NewMockRCHTTPClient(ctrl *gomock.Controller) *MockRCHTTPClient {
	mock := &MockRCHTTPClient{ctrl: ctrl}
	mock.recorder = &MockRCHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRCHTTPClient) EXPECT() *MockRCHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockRCHTTPClient) Do(arg0 context.Context, arg1 *http.Request) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockRCHTTPClientMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRCHTTPClient)(nil).Do), arg0, arg1)
}

// Get mocks base method
func (m *MockRCHTTPClient) Get(arg0 context.Context, arg1 string) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRCHTTPClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRCHTTPClient)(nil).Get), arg0, arg1)
}

// GetMaxRetries mocks base method
func (m *MockRCHTTPClient) GetMaxRetries() int {
	ret := m.ctrl.Call(m, "GetMaxRetries")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxRetries indicates an expected call of GetMaxRetries
func (mr *MockRCHTTPClientMockRecorder) GetMaxRetries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxRetries", reflect.TypeOf((*MockRCHTTPClient)(nil).GetMaxRetries))
}

// Head mocks base method
func (m *MockRCHTTPClient) Head(arg0 context.Context, arg1 string) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Head", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head
func (mr *MockRCHTTPClientMockRecorder) Head(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockRCHTTPClient)(nil).Head), arg0, arg1)
}

// Post mocks base method
func (m *MockRCHTTPClient) Post(arg0 context.Context, arg1, arg2 string, arg3 io.Reader) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Post", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockRCHTTPClientMockRecorder) Post(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRCHTTPClient)(nil).Post), arg0, arg1, arg2, arg3)
}

// PostForm mocks base method
func (m *MockRCHTTPClient) PostForm(arg0 context.Context, arg1 string, arg2 url.Values) (*http.Response, error) {
	ret := m.ctrl.Call(m, "PostForm", arg0, arg1, arg2)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm
func (mr *MockRCHTTPClientMockRecorder) PostForm(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockRCHTTPClient)(nil).PostForm), arg0, arg1, arg2)
}

// Put mocks base method
func (m *MockRCHTTPClient) Put(arg0 context.Context, arg1, arg2 string, arg3 io.Reader) (*http.Response, error) {
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockRCHTTPClientMockRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRCHTTPClient)(nil).Put), arg0, arg1, arg2, arg3)
}

// SetAuthToken mocks base method
func (m *MockRCHTTPClient) SetAuthToken(arg0 string) {
	m.ctrl.Call(m, "SetAuthToken", arg0)
}

// SetAuthToken indicates an expected call of SetAuthToken
func (mr *MockRCHTTPClientMockRecorder) SetAuthToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAuthToken", reflect.TypeOf((*MockRCHTTPClient)(nil).SetAuthToken), arg0)
}

// SetMaxRetries mocks base method
func (m *MockRCHTTPClient) SetMaxRetries(arg0 int) {
	m.ctrl.Call(m, "SetMaxRetries", arg0)
}

// SetMaxRetries indicates an expected call of SetMaxRetries
func (mr *MockRCHTTPClientMockRecorder) SetMaxRetries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxRetries", reflect.TypeOf((*MockRCHTTPClient)(nil).SetMaxRetries), arg0)
}

// SetTimeout mocks base method
func (m *MockRCHTTPClient) SetTimeout(arg0 time.Duration) {
	m.ctrl.Call(m, "SetTimeout", arg0)
}

// SetTimeout indicates an expected call of SetTimeout
func (mr *MockRCHTTPClientMockRecorder) SetTimeout(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockRCHTTPClient)(nil).SetTimeout), arg0)
}
