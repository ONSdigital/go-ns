// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package audit

import (
	"context"
	"github.com/ONSdigital/go-ns/common"
	"sync"
)

var (
	lockAuditorServiceMockRecord sync.RWMutex
)

// AuditorServiceMock is a mock implementation of AuditorService.
//
//     func TestSomethingThatUsesAuditorService(t *testing.T) {
//
//         // make and configure a mocked AuditorService
//         mockedAuditorService := &AuditorServiceMock{
//             RecordFunc: func(ctx context.Context, action string, result string, params common.Params) error {
// 	               panic("TODO: mock out the Record method")
//             },
//         }
//
//         // TODO: use mockedAuditorService in code that requires AuditorService
//         //       and then make assertions.
//
//     }
type AuditorServiceMock struct {
	// RecordFunc mocks the Record method.
	RecordFunc func(ctx context.Context, action string, result string, params common.Params) error

	// calls tracks calls to the methods.
	calls struct {
		// Record holds details about calls to the Record method.
		Record []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Action is the action argument value.
			Action string
			// Result is the result argument value.
			Result string
			// Params is the params argument value.
			Params common.Params
		}
	}
}

// Record calls RecordFunc.
func (mock *AuditorServiceMock) Record(ctx context.Context, action string, result string, params common.Params) error {
	if mock.RecordFunc == nil {
		panic("moq: AuditorServiceMock.RecordFunc is nil but AuditorService.Record was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Action string
		Result string
		Params common.Params
	}{
		Ctx:    ctx,
		Action: action,
		Result: result,
		Params: params,
	}
	lockAuditorServiceMockRecord.Lock()
	mock.calls.Record = append(mock.calls.Record, callInfo)
	lockAuditorServiceMockRecord.Unlock()
	return mock.RecordFunc(ctx, action, result, params)
}

// RecordCalls gets all the calls that were made to Record.
// Check the length with:
//     len(mockedAuditorService.RecordCalls())
func (mock *AuditorServiceMock) RecordCalls() []struct {
	Ctx    context.Context
	Action string
	Result string
	Params common.Params
} {
	var calls []struct {
		Ctx    context.Context
		Action string
		Result string
		Params common.Params
	}
	lockAuditorServiceMockRecord.RLock()
	calls = mock.calls.Record
	lockAuditorServiceMockRecord.RUnlock()
	return calls
}

var (
	lockOutboundProducerMockOutput sync.RWMutex
)

// OutboundProducerMock is a mock implementation of OutboundProducer.
//
//     func TestSomethingThatUsesOutboundProducer(t *testing.T) {
//
//         // make and configure a mocked OutboundProducer
//         mockedOutboundProducer := &OutboundProducerMock{
//             OutputFunc: func() chan []byte {
// 	               panic("TODO: mock out the Output method")
//             },
//         }
//
//         // TODO: use mockedOutboundProducer in code that requires OutboundProducer
//         //       and then make assertions.
//
//     }
type OutboundProducerMock struct {
	// OutputFunc mocks the Output method.
	OutputFunc func() chan []byte

	// calls tracks calls to the methods.
	calls struct {
		// Output holds details about calls to the Output method.
		Output []struct {
		}
	}
}

// Output calls OutputFunc.
func (mock *OutboundProducerMock) Output() chan []byte {
	if mock.OutputFunc == nil {
		panic("moq: OutboundProducerMock.OutputFunc is nil but OutboundProducer.Output was just called")
	}
	callInfo := struct {
	}{}
	lockOutboundProducerMockOutput.Lock()
	mock.calls.Output = append(mock.calls.Output, callInfo)
	lockOutboundProducerMockOutput.Unlock()
	return mock.OutputFunc()
}

// OutputCalls gets all the calls that were made to Output.
// Check the length with:
//     len(mockedOutboundProducer.OutputCalls())
func (mock *OutboundProducerMock) OutputCalls() []struct {
} {
	var calls []struct {
	}
	lockOutboundProducerMockOutput.RLock()
	calls = mock.calls.Output
	lockOutboundProducerMockOutput.RUnlock()
	return calls
}
