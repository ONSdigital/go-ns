// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package audit_test

import (
	"sync"
)

var (
	lockOutboundProducerMockOutput sync.RWMutex
)

// OutboundProducerMock is a mock implementation of OutboundProducer.
//
//     func TestSomethingThatUsesOutboundProducer(t *testing.T) {
//
//         // make and configure a mocked OutboundProducer
//         mockedOutboundProducer := &OutboundProducerMock{
//             OutputFunc: func() chan []byte {
// 	               panic("TODO: mock out the Output method")
//             },
//         }
//
//         // TODO: use mockedOutboundProducer in code that requires OutboundProducer
//         //       and then make assertions.
//
//     }
type OutboundProducerMock struct {
	// OutputFunc mocks the Output method.
	OutputFunc func() chan []byte

	// calls tracks calls to the methods.
	calls struct {
		// Output holds details about calls to the Output method.
		Output []struct {
		}
	}
}

// Output calls OutputFunc.
func (mock *OutboundProducerMock) Output() chan []byte {
	if mock.OutputFunc == nil {
		panic("moq: OutboundProducerMock.OutputFunc is nil but OutboundProducer.Output was just called")
	}
	callInfo := struct {
	}{}
	lockOutboundProducerMockOutput.Lock()
	mock.calls.Output = append(mock.calls.Output, callInfo)
	lockOutboundProducerMockOutput.Unlock()
	return mock.OutputFunc()
}

// OutputCalls gets all the calls that were made to Output.
// Check the length with:
//     len(mockedOutboundProducer.OutputCalls())
func (mock *OutboundProducerMock) OutputCalls() []struct {
} {
	var calls []struct {
	}
	lockOutboundProducerMockOutput.RLock()
	calls = mock.calls.Output
	lockOutboundProducerMockOutput.RUnlock()
	return calls
}
